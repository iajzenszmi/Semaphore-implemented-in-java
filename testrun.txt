user@personal:~$ nano
user@personal:~$ ls *.java
MutexDemo.java  SemaphoreDemo.java
user@personal:~$ java SemaphoreDemo.java
Total available Semaphore permits : 1
A : acquiring lock...
B : acquiring lock...
B : available Semaphore permits now: 1
B : got the permit!
A : available Semaphore permits now: 1
B : is performing operation 1, available Semaphore permits : 0
C : acquiring lock...
C : available Semaphore permits now: 0
D : acquiring lock...
D : available Semaphore permits now: 0
B : is performing operation 2, available Semaphore permits : 0
B : is performing operation 3, available Semaphore permits : 0
B : is performing operation 4, available Semaphore permits : 0
B : is performing operation 5, available Semaphore permits : 0
B : releasing lock...
A : got the permit!
A : is performing operation 1, available Semaphore permits : 0
B : available Semaphore permits now: 0
A : is performing operation 2, available Semaphore permits : 0
A : is performing operation 3, available Semaphore permits : 0
A : is performing operation 4, available Semaphore permits : 0
A : is performing operation 5, available Semaphore permits : 0
A : releasing lock...
A : available Semaphore permits now: 1
C : got the permit!
C : is performing operation 1, available Semaphore permits : 0
C : is performing operation 2, available Semaphore permits : 0
C : is performing operation 3, available Semaphore permits : 0
C : is performing operation 4, available Semaphore permits : 0
C : is performing operation 5, available Semaphore permits : 0
C : releasing lock...
C : available Semaphore permits now: 1
D : got the permit!
D : is performing operation 1, available Semaphore permits : 0
D : is performing operation 2, available Semaphore permits : 0
D : is performing operation 3, available Semaphore permits : 0
D : is performing operation 4, available Semaphore permits : 0
D : is performing operation 5, available Semaphore permits : 0
D : releasing lock...
D : available Semaphore permits now: 1
user@personal:~$ cat SemaphoreDemo.java
import java.util.concurrent.Semaphore;

public class SemaphoreDemo {

    // Semaphore with a single permit (like a binary semaphore)
    private static final Semaphore semaphore = new Semaphore(1);

    static class Task extends Thread {

        private String name;

        public Task(String name) {
            this.name = name;
        }

        public void run() {
            try {
                System.out.println(name + " : acquiring lock...");
                System.out.println(name + " : available Semaphore permits now: " 
                                   + semaphore.availablePermits());

                semaphore.acquire();
                System.out.println(name + " : got the permit!");

                try {
                    // Simulating a task that takes some time
                    for (int i = 1; i <= 5; i++) {
                        System.out.println(name + " : is performing operation " + i 
                                           + ", available Semaphore permits : "
                                           + semaphore.availablePermits());
                        // sleep 1 second
                        Thread.sleep(1000);
                    }
                } finally {
                    // Release the permit after the task
                    System.out.println(name + " : releasing lock...");
                    semaphore.release();
                    System.out.println(name + " : available Semaphore permits now: " 
                                       + semaphore.availablePermits());
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("Total available Semaphore permits : " 
                           + semaphore.availablePermits());

        Task t1 = new Task("A");
        t1.start();

        Task t2 = new Task("B");
        t2.start();

        Task t3 = new Task("C");
        t3.start();

        Task t4 = new Task("D");
        t4.start();
    }
}
user@personal:~$ sloccount SemaphoreDemo.java
Have a non-directory at the top, so creating directory top_dir
Adding /home/user/SemaphoreDemo.java to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
46      top_dir         java=46


Totals grouped by language (dominant language first):
java:            46 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 46
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.09)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.09 (1.02)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.09
Total Estimated Cost to Develop                           = $ 1,065
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
user@personal:~$ 
